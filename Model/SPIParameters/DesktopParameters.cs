using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StyleChange.Model.SPIParameters
{
    /// <summary>
    /// Параметры рабочего стола
    /// </summary>
    [Serializable]
    internal static class DesktopParameters
    {


        /// <summary>
        /// Определяет, включен ли ClearType. Параметр pvParam должен указывать на переменную BOOL, которая получает TRUE, если ClearType включен, или FALSE в противном случае.
        /// ClearType - это программная технология, которая улучшает читаемость текста на жидкокристаллических дисплеях (ЖК-мониторах).
        /// Windows Server 2003 и Windows XP / 2000: этот параметр не поддерживается.
        /// </summary>
        public const int GetClearType = 0x1048;

        /// <summary>
        /// Получает полный путь к растровому файлу для обоев рабочего стола.
        /// Параметр pvParam должен указывать на буфер для получения строки пути с нулевым символом в конце.
        /// Задайте для параметра uiParam размер в символах буфера pvParam.
        /// Возвращаемая строка не будет превышать MAX_PATH символов. Если обои для рабочего стола отсутствуют, возвращаемая строка пуста.
        /// </summary>
        public const int GetDeskWallpaper = 0x0073;

        /// <summary>
        /// Определяет, включен ли эффект тени. Параметр pvParam должен указывать на переменную BOOL, которая возвращает TRUE, если включено, или FALSE, если отключено.
        /// Windows 2000: этот параметр не поддерживается.
        /// </summary>
        public const int GetDropShadow = 0x1024;

        /// <summary>
        /// Определяет, имеют ли собственные меню пользователя плоский вид меню.
        /// Параметр pvParam должен указывать на переменную BOOL, которая возвращает TRUE, если задан внешний вид плоского меню, или FALSE в противном случае.
        /// Windows 2000: этот параметр не поддерживается.
        /// </summary>
        public const int GetFlatMenu = 0x1022;

        /// <summary>
        /// Определяет, включена ли функция сглаживания шрифтов.
        /// Эта функция использует сглаживание шрифта, чтобы сделать кривые шрифта более плавными, рисуя пиксели на разных уровнях серого.
        /// Параметр pvParam должен указывать на переменную BOOL, которая получает значение ИСТИНА, если функция включена, или значение ЛОЖЬ, если это не так.
        /// </summary>
        public const int GetFontSmoothing = 0x004A;

        /// <summary>
        /// Получает значение контрастности, которое используется в сглаживании ClearType. 
        /// Параметр pvParam должен указывать на UINT, который получает информацию. Допустимые значения контрастности: от 1000 до 2200. Значение по умолчанию - 1400.
        /// Windows 2000: этот параметр не поддерживается.
        /// </summary>
        public const int GetFontSmoothingContrast = 0x200C;

        /// <summary>
        /// Получает ориентацию сглаживания шрифта. Параметр pvParam должен указывать на UINT, который получает информацию.
        /// Возможные значения: FE_FONTSMOOTHINGORIENTATIONBGR (синий-зеленый-красный) и FE_FONTSMOOTHINGORIENTATIONRGB (красный-зеленый-синий).
        /// Windows XP / 2000: этот параметр не поддерживается до Windows XP с пакетом обновления 2 (SP2).
        /// </summary>
        public const int GetFontSmoothingOrientation = 0x2012;

        /// <summary>
        /// Получает тип сглаживания шрифта. Параметр pvParam должен указывать на UINT, который получает информацию. 
        /// Возможные значения: FE_FONTSMOOTHINGSTANDARD и FE_FONTSMOOTHINGCLEARTYPE.
        /// Windows 2000: этот параметр не поддерживается.
        /// </summary>
        public const int GetFontSmoothingType = 0x200A;

        /// <summary>
        /// Получает размер рабочей области на основном мониторе.
        /// Рабочая область - это часть экрана, не скрытая системной панелью задач или панелями инструментов рабочего стола приложения.
        /// Параметр pvParam должен указывать на структуру RECT, которая получает координаты рабочей области, выраженные в физическом размере пикселя.
        /// Любой режим виртуализации DPI вызывающей стороны не влияет на этот вывод.
        /// Чтобы получить рабочую область монитора, отличного от основного монитора, вызовите функцию GetMonitorInfo.
        /// </summary>
        public const int GetWorkArea = 0x0030;

        /// <summary>
        /// Включает или выключает ClearType. Параметр pvParam является переменной BOOL. 
        /// Установите для pvParam значение TRUE, чтобы включить ClearType, или FALSE, чтобы отключить его.
        /// ClearType - это программная технология, которая улучшает читаемость текста на ЖК-мониторах.
        /// Windows Server 2003 и Windows XP / 2000: этот параметр не поддерживается.
        /// </summary>
        public const int SetClearType = 0x1049;

        /// <summary>
        /// Перезагрузка системы курсоров. Установите для параметра uiParam значение 0, а для параметра pvParam значение NULL.
        /// </summary>
        public const int SetCursors = 0x0057;

        /// <summary>
        /// Устанавливает текущий шаблон рабочего стола, заставляя Windows читать параметр Pattern = из файла WIN.INI.
        /// </summary>
        public const int SetDeskPattern = 0x0015;

        /// <summary>
        /// Примечание. Если используется флаг SPI_SETDESKWALLPAPER, 
        /// SystemParametersInfo возвращает значение ИСТИНА, если не возникает ошибка (например, когда указанный файл не существует).
        /// </summary>
        public const int SetDeskWallpaper = 0x0014;

        /// <summary>
        /// Включает или отключает эффект тени. 
        /// Установите для pvParam значение TRUE, чтобы включить эффект тени, или FALSE, чтобы отключить его. Вы также должны иметь CS_DROPSHADOW в стиле класса окна.
        /// Windows 2000: этот параметр не поддерживается.
        /// </summary>
        public const int SetDropShadow = 0x1025;

        /// <summary>
        /// Включает или отключает отображение плоского меню для собственных меню пользователя. 
        /// Установите для pvParam значение TRUE, чтобы включить отображение плоского меню, или FALSE, чтобы отключить его.
        /// Когда эта опция включена, строка меню использует COLOR_MENUBAR для фона меню, COLOR_MENU для фона всплывающего меню, 
        /// COLOR_MENUHILIGHT для заливки текущего выбора меню и COLOR_HILIGHT для контура текущего выбора меню. 
        /// Если этот параметр отключен, меню отображаются с использованием тех же показателей и цветов, что и в Windows 2000.
        /// Windows 2000: этот параметр не поддерживается.
        /// </summary>
        public const int SetFlatMenu = 0x1023;

        /// <summary>
        /// Включает или отключает функцию сглаживания шрифтов, которая использует сглаживание шрифтов,
        /// чтобы кривые шрифты выглядели более сглаженными, рисуя пиксели на разных уровнях серого.
        /// Чтобы включить эту функцию, установите для параметра uiParam значение TRUE. 
        /// Чтобы отключить эту функцию, установите для параметра uiParam значение FALSE.
        /// </summary>
        public const int SetFontSmoothing = 0x004B;

        /// <summary>
        /// Устанавливает значение контрастности, используемое в сглаживании ClearType.
        /// Параметр pvParam является значением контрастности. Допустимые значения контрастности: от 1000 до 2200. Значение по умолчанию - 1400.
        /// SPI_SETFONTSMOOTHINGTYPE также должен быть установлен в FE_FONTSMOOTHINGCLEARTYPE.
        /// Windows 2000: этот параметр не поддерживается.
        /// </summary>
        public const int SetFontSmoothingContrast = 0x200D;

        /// <summary>
        /// Устанавливает ориентацию сглаживания шрифта. 
        /// Параметр pvParam имеет значение FE_FONTSMOOTHINGORIENTATIONBGR (сине-зелено-красный) или FE_FONTSMOOTHINGORIENTATIONRGB (красно-зелено-синий).
        /// Windows XP / 2000: этот параметр не поддерживается до Windows XP с пакетом обновления 2 (SP2).
        /// </summary>
        public const int SetFontSmoothingOrientation = 0x2013;

        /// <summary>
        /// Устанавливает тип сглаживания шрифта. 
        /// Параметр pvParam имеет значение FE_FONTSMOOTHINGSTANDARD, если используется стандартное сглаживание,
        /// или FE_FONTSMOOTHINGCLEARTYPE, если используется ClearType. Значением по умолчанию является FE_FONTSMOOTHINGSTANDARD.
        /// SPI_SETFONTSMOOTHING также должен быть установлен.
        /// Windows 2000: этот параметр не поддерживается.
        /// </summary>
        public const int SetFontSmoothingType = 0x200B;

        /// <summary>
        /// Устанавливает размер рабочей области.
        /// Рабочая область - это часть экрана, не скрытая системной панелью задач или панелями инструментов рабочего стола приложения.
        /// Параметр pvParam является указателем на структуру RECT, которая задает новый прямоугольник рабочей области,
        /// выраженный в координатах виртуального экрана. В системе с несколькими мониторами дисплея функция устанавливает рабочую область монитора,
        /// которая содержит указанный прямоугольник.
        /// </summary>
        public const int SetWorkArea = 0x002F;
    }
}
